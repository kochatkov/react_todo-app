{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/NewTodo.js","App.js","index.js"],"names":["TodoItem","todo","toggledCheck","deleteCommand","id","title","completed","className","type","checked","onChange","e","target","htmlFor","onClick","TodoList","todos","map","key","TodosFilter","filterTypes","filtered","filter","filterType","classNames","selected","data-filter","NewTodo","state","handleChangeInput","setState","value","changeId","Math","random","handleSubmitTodo","evt","preventDefault","trim","props","addTodo","this","onSubmit","placeholder","name","React","Component","filterTodos","App","visibleTodos","allTodos","prevState","getAttribute","todoId","clearCompleted","checkedAll","activeTodos","length","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a96faf3d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo, toggledCheck, deleteCommand }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          id={id}\n          onChange={e => toggledCheck(e.target.checked)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteCommand} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteCommand: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, toggledCheck, deleteCommand }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        toggledCheck={checked => toggledCheck(todo.id, checked)}\n        deleteCommand={() => deleteCommand(todo.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteCommand: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodosFilter = ({ filterTypes, filtered, filter }) => (\n  <ul className=\"filters\">\n    {filterTypes.map(filterType => (\n      <li key={filterType}>\n        <button\n          type=\"button\"\n          className={\n            classNames({ selected: filter === filterType })\n          }\n          data-filter={filterType}\n          onClick={filtered}\n        >\n          {filterType}\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filterTypes: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  filtered: PropTypes.func.isRequired,\n  filter: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]).isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleChangeInput = (e) => {\n    this.setState({\n      title: e.target.value,\n    });\n  }\n\n  changeId = () => (Math.random() + 1);\n\n  handleSubmitTodo = (evt) => {\n    evt.preventDefault();\n\n    if (this.state.title !== '') {\n      const todo = {\n        id: `${this.changeId()}`,\n        title: this.state.title.trim(),\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          name={title}\n          value={title}\n          onChange={this.handleChangeInput}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\nimport NewTodo from './components/NewTodo';\n\nconst filterTypes = ['All', 'Active', 'Completed'];\n\nconst filterTodos = (todos, filter) => {\n  if (filter === 'Active') {\n    return todos.filter(todo => todo.completed === false);\n  }\n\n  if (filter === 'Completed') {\n    return todos.filter(todo => todo.completed === true);\n  }\n\n  return todos;\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    visibleTodos: [],\n    filter: 'All',\n  }\n\n  addTodo = (todo) => {\n    const { filter, todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos, todo];\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  toggledCheck = (id, checked) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: checked,\n          }\n          : todo\n      ));\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  filtered = (evt) => {\n    const filter = evt.target.getAttribute('data-filter');\n    const { todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos];\n\n      return {\n        visibleTodos: filterTodos(allTodos, filter),\n        filter,\n      };\n    });\n  }\n\n  deleteCommand = (todoId) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => todo.id !== todoId);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => !todo.completed);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  checkedAll = ({ target }) => {\n    const { checked } = target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n      visibleTodos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { todos, visibleTodos, filter } = this.state;\n    const activeTodos = todos.filter(todo => !todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.length && todos.every(todo => todo.completed)}\n            onClick={this.checkedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={visibleTodos}\n            toggledCheck={this.toggledCheck}\n            deleteCommand={this.deleteCommand}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos.length} items left`}\n          </span>\n          <TodosFilter\n            filtered={this.filtered}\n            filterTypes={filterTypes}\n            filter={filter}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}