{"version":3,"sources":["TodoItem.js","TodoList.js","TodosFilter.js","NewTodo.js","App.js","index.js"],"names":["TodoItem","todo","changeComplete","deleteTodo","id","title","completed","className","classNames","type","checked","onChange","e","target","htmlFor","onClick","TodoList","todos","map","key","TodosFilter","filterTypes","filterItem","filter","filterType","selected","data-filter","getAttribute","NewTodo","state","handleChangeInput","setState","value","changeId","Math","random","handleSubmitTodo","evt","preventDefault","replace","props","addTodo","this","onSubmit","placeholder","name","React","Component","App","prevState","todoId","clearCompleted","pickAll","activeTodos","completeTodos","filterTodos","length","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7f04a52.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodoItem = ({ todo, changeComplete, deleteTodo }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li className={classNames({\n      completed,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          id={id}\n          onChange={e => changeComplete(e.target.checked)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteTodo} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, changeComplete, deleteTodo }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        changeComplete={checked => changeComplete(todo.id, checked)}\n        deleteTodo={() => deleteTodo(todo.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodosFilter = ({ filterTypes, filterItem, filter }) => (\n  <ul className=\"filters\">\n    {filterTypes.map(filterType => (\n      <li key={filterType}>\n        <button\n          type=\"button\"\n          className={\n            classNames({ selected: filter === filterType })\n          }\n          data-filter={filterType}\n          onClick={e => filterItem(e.target.getAttribute('data-filter'))}\n        >\n          {filterType}\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filterTypes: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  filterItem: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleChangeInput = (e) => {\n    this.setState({\n      title: e.target.value,\n    });\n  }\n\n  changeId = () => (Math.random() + 1);\n\n  handleSubmitTodo = (evt) => {\n    evt.preventDefault();\n\n    if (this.state.title.replace(/\\s/g, '') !== '') {\n      const todo = {\n        id: `${this.changeId()}`,\n        title: this.state.title,\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          name={title}\n          value={title}\n          onChange={this.handleChangeInput}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport TodosFilter from './TodosFilter';\nimport NewTodo from './NewTodo';\n\nconst filterTypes = ['All', 'Active', 'Completed'];\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'All',\n  }\n\n  addTodo = (todo) => {\n    const { todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos, todo];\n\n      return {\n        todos: allTodos,\n      };\n    });\n  }\n\n  changeComplete = (id) => {\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo\n      ));\n\n      return {\n        todos: allTodos,\n      };\n    });\n  }\n\n  filterItem = (filter) => {\n    this.setState(() => ({\n      filter,\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => todo.id !== todoId);\n\n      return {\n        todos: allTodos,\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => !todo.completed);\n\n      return {\n        todos: allTodos,\n      };\n    });\n  }\n\n  pickAll = ({ target }) => {\n    const { checked } = target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n    const activeTodos = todos.filter(todo => !todo.completed);\n    const completeTodos = todos.filter(todo => todo.completed);\n\n    let filterTodos = [...todos];\n\n    if (filter === 'Active') {\n      filterTodos = activeTodos;\n    }\n\n    if (filter === 'Completed') {\n      filterTodos = completeTodos;\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.length && todos.every(todo => todo.completed)}\n            onClick={this.pickAll}\n          />\n          {todos.length > 0 && (\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          )}\n          <TodoList\n            todos={filterTodos}\n            changeComplete={this.changeComplete}\n            deleteTodo={this.deleteTodo}\n          />\n        </section>\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${activeTodos.length} items left`}\n            </span>\n            <TodosFilter\n              filterItem={this.filterItem}\n              filterTypes={filterTypes}\n              filter={filter}\n            />\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={this.clearCompleted}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )\n        }\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}